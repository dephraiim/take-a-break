import React from "react";
import Head from "next/head";
import Image from "next/image";
import useCountDown from "react-countdown-hook";
import { useState } from "react";
import styles from "../styles/Home.module.css";

const interval = 1000;

function formatTime(seconds) {
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return `${minutes}:${remainingSeconds < 10 ? "0" : ""}${remainingSeconds}`;
}

export default function Home() {
  const [session, setSession] = useState(false);
  const [mouseMoved, setMouseMoved] = useState(false);
  const [initialTime, setInitialTime] = useState(2 * 60 * 1000);
  const [timeLeft, { start, pause, resume, reset }] = useCountDown(initialTime, interval);

  const restart = React.useCallback((newTime) => start(newTime), []);
  const isTimerActive = timeLeft > 0;

  const handleMouseMove = React.useCallback(() => {
    let timer;

    restart(initialTime);
    setMouseMoved(true);

    clearTimeout(timer);

    timer = setTimeout(() => {
      setMouseMoved(false);
    }, 1000);
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Take a Break</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main} onMouseMove={handleMouseMove}>
        {!session ? (
          <div>
            <div>
              <button onClick={() => setInitialTime(5 * 1000)}>2 minutes</button>
              <button onClick={() => setInitialTime(3 * 60 * 1000)}>3 minutes</button>
              <button onClick={() => setInitialTime(5 * 60 * 1000)}>5 minutes</button>
            </div>
            <button
              onClick={() => {
                setSession(true);
                start(initialTime);
              }}
            >
              Start Session
            </button>
          </div>
        ) : (
          <div>
            {isTimerActive ? (
              <div>
                <p>{formatTime(timeLeft / 1000)}</p>
                {mouseMoved && <p>Oops! Try Again</p>}
              </div>
            ) : (
              <div>
                <div>Timer is Done</div>
                <button onClick={() => restart(initialTime)}>Restart</button>
                <button
                  onClick={() => {
                    setSession(false);
                  }}
                >
                  Take another break?
                </button>
              </div>
            )}
          </div>
        )}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
